name: CMake Build & Test

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  build:
    name: Build ${{ matrix.os }} - ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]

    env:
      CMAKE_BUILD_PARALLEL_LEVEL: 4
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
      VCPKG_FEATURE_FLAGS: manifests # ensure manifest mode is on

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      # ---------- Get vcpkg ----------
      - name: Clone vcpkg
        if: runner.os == 'Windows'
        run: git clone --depth 1 https://github.com/microsoft/vcpkg "${env:VCPKG_ROOT}"

      - name: Clone vcpkg
        if: runner.os != 'Windows'
        run: git clone --depth 1 https://github.com/microsoft/vcpkg "$VCPKG_ROOT"

      - name: Bootstrap vcpkg
        if: runner.os != 'Windows'
        run: $VCPKG_ROOT/bootstrap-vcpkg.sh

      - name: Bootstrap vcpkg
        if: runner.os == 'Windows'
        shell: pwsh
        run: '& "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"'

      # ---------- Get Ninja ----------
      - name: Install Ninja
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build tree

      - name: Install Ninja
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install ninja

      # ---------- Configure ----------
      - name: Configure
        if: runner.os != 'Windows'
        run: |
          cmake -DRUN_TESTS_AFTER_BUILD=OFF . -B build -G Ninja -DCHECK_COVERAGE=ON -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"

      - name: Configure
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $VCPKG_ROOT=${env:VCPKG_ROOT}
          cmake -DRUN_TESTS_AFTER_BUILD=OFF . -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"

      # ---------- Build ----------
      - name: Build
        if: runner.os != 'Windows'
        run: |
          cmake --build build --parallel

      - name: Build
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $VCPKG_ROOT=${env:VCPKG_ROOT}
          cmake --build build --config ${{ matrix.build_type }}

      # ---------- Upload binaries ----------
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cpp-binaries (${{ matrix.os }} - ${{ matrix.build_type }}) 
          path: |
            build/**
          if-no-files-found: error
          retention-days: 7

  test:
    name: Test ${{ matrix.os }} - ${{ matrix.build_type }}
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]

    env:
      CTEST_OUTPUT_ON_FAILURE: 1

    steps:
      - uses: actions/checkout@v4

      # ---------- Download binaries ----------
      - name: Fetch build artifacts
        uses: actions/download-artifact@v4
        with:
          name: cpp-binaries (${{ matrix.os }} - ${{ matrix.build_type }}) 
          path: ./build

      # ---------- Set executable property ----------
      - name: Set properties
        if: runner.os != 'Windows'
        run: |
          chmod -R +x build/*
          chmod -R +x build/**/*

      # ---------- Run tests ----------
      - name: Run tests
        if: runner.os != 'Windows'
        run: |
          ctest --test-dir build --output-on-failure

      - name: Run tests
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          ctest -C ${{ matrix.build_type }} --test-dir build --output-on-failure

  base_coverage:
    name: Get base code coverage
    runs-on: ubuntu-latest

    env:
      CMAKE_BUILD_PARALLEL_LEVEL: 4
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VCPKG_DEFAULT_TRIPLET: ubuntu-x64
      VCPKG_FEATURE_FLAGS: manifests

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}

      - name: Set up vcpkg
        run: |
          git clone --depth 1 https://github.com/microsoft/vcpkg "$VCPKG_ROOT"
          $VCPKG_ROOT/bootstrap-vcpkg.sh

      - name: Install dependencies
        run: |
          sudo apt-get update 
          sudo apt-get install -y lcov python3 ninja-build
          pipx install gcovr

      - name: Configure
        run: |
          cmake -DRUN_TESTS_AFTER_BUILD=OFF . -B build -G Ninja -DCHECK_COVERAGE=ON -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"

      - name: Build
        run: |
          cmake --build build --parallel

      - name: Run tests
        run: |
          ctest --test-dir build --output-on-failure

      - name: Get coverage report
        run: |
          mkdir -p coverage
          gcovr -r . --exclude 'tests' --exclude 'build' --lcov -o coverage/lcov.info

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage (ubuntu base)
          path: coverage/lcov.info

  
  coverage:
    name: Check coverage
    needs: [build, base_coverage]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: cpp-binaries (ubuntu-latest - Debug)
          path: ./build

      # Comment
      - name: Install coverage dependencies
        run: |
          sudo apt-get update 
          sudo apt-get install -y lcov python3
          pipx install gcovr

      - name: Set properties
        run: |
          chmod -R +x build/*
          chmod -R +x build/**/*

      - name: Run tests
        run: |
          ctest --test-dir build

      - name: Get coverage report
        run: |
          mkdir -p coverage
          gcovr -r . --exclude 'tests' --exclude 'build' --lcov -o coverage/lcov.info

      - name: Download base coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage (ubuntu base)
          path: ./

      - name: Barecheck report
        uses: barecheck/code-coverage-action@v1
        with:
          barecheck-github-app-token: ${{ secrets.BARECHECK_GITHUB_APP_TOKEN }}
          lcov-file: "./coverage/lcov.info"
          base-lcov-file: "./lcov.info"
          send-summary-comment: true
          show-annotations: "warning"
          minimum-ratio: 1
