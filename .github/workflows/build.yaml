name: CMake Build & Test

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  build:
    name: Build ${{ matrix.os }} - ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]

    env:
      CMAKE_BUILD_PARALLEL_LEVEL: 4
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
      VCPKG_FEATURE_FLAGS: manifests # ensure manifest mode is on

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      # ---------- Get vcpkg ----------
      - name: Clone vcpkg
        if: runner.os == 'Windows'
        run: git clone --depth 1 https://github.com/microsoft/vcpkg "${env:VCPKG_ROOT}"

      - name: Clone vcpkg
        if: runner.os != 'Windows'
        run: git clone --depth 1 https://github.com/microsoft/vcpkg "$VCPKG_ROOT"

      - name: Bootstrap vcpkg
        if: runner.os != 'Windows'
        run: $VCPKG_ROOT/bootstrap-vcpkg.sh

      - name: Bootstrap vcpkg
        if: runner.os == 'Windows'
        shell: pwsh
        run: '& "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"'

      # ---------- Get Ninja ----------
      - name: Install Ninja
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build

      - name: Install Ninja
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install ninja

      # ---------- Configure ----------
      - name: Configure
        if: runner.os != 'Windows'
        run: |
          cmake -DRUN_TESTS_AFTER_BUILD=OFF . -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"

      - name: Configure
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $VCPKG_ROOT=${env:VCPKG_ROOT}
          cmake -DRUN_TESTS_AFTER_BUILD=OFF . -G "Visual Studio 17 2022" -A x64 -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"
          # Note: MSVC is multi-config; build type is chosen at build/ctest time.

      # ---------- Build ----------
      - name: Build
        if: runner.os != 'Windows'
        run: |
          cmake --build . --parallel

      - name: Build
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $VCPKG_ROOT=${env:VCPKG_ROOT}
          cmake --build . --config ${{ matrix.build_type }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cpp-binaries
          path: |
            build/**
          if-no-files-found: error
          retention-days: 7

  test:
    name: Build ${{ matrix.os }} - ${{ matrix.build_type }}
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]

    env:
      CTEST_OUTPUT_ON_FAILURE: 1

    steps:
      - uses: actions/checkout@v4

      - name: Fetch build artifacts
        uses: actions/download-artifact@v4
        with:
          name: cpp-binaries
          path: ./build

      - name: Run tests
        if: runner.os != 'Windows'
        run: |
          ctest --output-on-failure

      - name: Run tests
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          ctest -C ${{ matrix.build_type }} --output-on-failure