name: CMake Build & Test

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  build-and-test:
    name: ${{ matrix.os }} â€¢ ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Debug, Release]

    env:
      CTEST_OUTPUT_ON_FAILURE: 1
      CMAKE_BUILD_PARALLEL_LEVEL: 4
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
      VCPKG_FEATURE_FLAGS: manifests # ensure manifest mode is on

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      # ---------- Get vcpkg ----------
      - name: Clone vcpkg
        run: git clone --depth 1 https://github.com/microsoft/vcpkg "$env{VCPKG_ROOT}"

      - name: Bootstrap vcpkg (Linux/macOS)
        if: runner.os != 'Windows'
        run: $VCPKG_ROOT/bootstrap-vcpkg.sh

      - name: Bootstrap vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: '& "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"'

      # ---------- Get Ninja ----------
      - name: Install Ninja (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build

      - name: Install Ninja (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install ninja

      # ---------- Configure ----------
      - name: Configure (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cmake -DRUN_TESTS_AFTER_BUILD=OFF . -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"

      - name: Configure (Windows, MSVC)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cmake -DRUN_TESTS_AFTER_BUILD=OFF . -G "Visual Studio 17 2022" -A x64 -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"
          # Note: MSVC is multi-config; build type is chosen at build/ctest time.

      # ---------- Build ----------
      - name: Build (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cmake --build . --parallel

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cmake --build . --config ${{ matrix.build_type }} --parallel

      # ---------- Test (CTest discovers Catch2 tests if you used add_test/catch_discover_tests) ----------
      - name: Test (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          ctest -N
          cat CTestTestfile.cmake
          ctest --output-on-failure

      - name: Test (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          ctest -C ${{ matrix.build_type }} --output-on-failure
